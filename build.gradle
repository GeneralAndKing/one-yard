buildscript {
    ext {
        springBootVersion = '2.2.1.RELEASE'
    }
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        google()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'idea'
}

allprojects {
    group = 'in.gaks'
    version = '1.0.0-SNAPSHOT'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    idea {
        module {
            downloadSources = true
        }
    }

    ext {
        set('springCloudVersion', "Hoxton.RC1")
        set('springSecurityOauth2Version', "2.4.0.RELEASE")
        set('guavaVersion', "28.1-jre")
        set('gsonVersion', "2.8.6")
        set('jetbrainsVersion', "17.0.0")
        set('fastjsonVersion', '1.2.62')
        set('apacheCommonsLangVersion', '3.9')
        set('jUnit5Version', '5.6.0-M1')
        set('druidVersion', '1.1.21')
        set('qiniuVersion', '7.2.27')
        set('h2Version', '1.4.200')
        set('mockitoVersion', '3.2.0')
    }

}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation(
            "com.google.guava:guava:${guavaVersion}",
            "com.alibaba:druid-spring-boot-starter:${druidVersion}",
            "com.google.code.gson:gson:${gsonVersion}",
            "org.jetbrains:annotations:${jetbrainsVersion}",
            "com.alibaba:fastjson:${fastjsonVersion}",
            "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}",
            "com.qiniu:qiniu-java-sdk:${qiniuVersion}"
    )
    implementation(
            "org.springframework.security.oauth:spring-security-oauth2:${springSecurityOauth2Version}",
            "org.springframework.boot:spring-boot-starter-security",
            'org.springframework.boot:spring-boot-starter-websocket',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-data-rest',
            'org.springframework.boot:spring-boot-starter-data-redis',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-thymeleaf',
            'org.springframework.boot:spring-boot-starter-mail',
            'org.springframework.data:spring-data-rest-hal-explorer'
    )
    implementation("org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:${springBootVersion}") {
        exclude group: 'org.springframework.security.oauth', module: 'spring-security-oauth2'
    }
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation(
            'org.springframework.security:spring-security-test',
            'org.springframework.boot:spring-boot-starter-test',
            "com.h2database:h2:${h2Version}"
    )
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    runtimeOnly 'mysql:mysql-connector-java'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}